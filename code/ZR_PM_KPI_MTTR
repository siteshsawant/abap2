*&---------------------------------------------------------------------*
*& Report  ZR_PM_KPI_MTTR
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZR_PM_KPI_MTTR.


*INCLUDE ZKPIMTBF_TOP.
INCLUDE ZKPIMTTR. " Variables & Selection Screen
DATA: LT_FINAL2 TYPE TABLE OF TY_FINAL,
      WA_FINAL  TYPE TY_FINAL.

INITIALIZATION.
  PERFORM USER_DROP_DOWN_LIST_FORMN. " Month Dropdown
  PERFORM USER_DROP_DOWN_LIST_FORYR. " Year Dropdown
  PERFORM USER_DROP_DOWN_LIST_FORWK. " Week Dropdown
*  PERFORM USER_DROP_DOWN_LIST_FORHR. " Hours Dropdown
*  T1 = 'Equipment'.
  T2 = 'Period'.
  T3 = 'Week'.
  T8 = 'Plant'.

AT SELECTION-SCREEN OUTPUT.
  PERFORM FROMEQUNR.

START-OF-SELECTION.
  DATA: EQUNR1 TYPE CHAR10.
  PERFORM GET_WEEKS. " Get all weeks and days of weeks except sundays.
  PERFORM GET_DATA.  " Get Data

  PERFORM DISPLAY_ALV.


FORM USER_DROP_DOWN_LIST_FORMN.
  DATA: NAME  TYPE VRM_ID,
        LIST  TYPE VRM_VALUES,
        VALUE LIKE LINE OF LIST.
  DATA: T_MONTHS TYPE T247 OCCURS 0 WITH HEADER LINE.
  CLEAR LIST. REFRESH LIST.
  NAME = 'P_MONTH'.
  SELECT * INTO TABLE T_MONTHS
  FROM T247 WHERE SPRAS EQ 'EN'.
  SORT T_MONTHS ASCENDING BY MNR.
  LOOP AT T_MONTHS.
    CLEAR VALUE.
    VALUE-KEY = T_MONTHS-MNR.
    VALUE-TEXT = T_MONTHS-LTX.
    APPEND VALUE TO LIST.
    P_MONTH = '01'.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      ID     = NAME
      VALUES = LIST.
ENDFORM.

FORM USER_DROP_DOWN_LIST_FORYR.
  DATA: NAME  TYPE VRM_ID,
        LIST  TYPE VRM_VALUES,
        VALUE LIKE LINE OF LIST.
  CLEAR LIST. REFRESH LIST.
  NAME = 'P_YEAR'.
  DO 100 TIMES.
    CLEAR VALUE.
    VALUE-KEY = 2000 + SY-INDEX.
    APPEND VALUE TO LIST.
  ENDDO.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      ID     = NAME
      VALUES = LIST.
  P_YEAR = '2022'.
ENDFORM.

FORM USER_DROP_DOWN_LIST_FORWK.
  DATA: NAME  TYPE VRM_ID,
        LIST  TYPE VRM_VALUES,
        VALUE LIKE LINE OF LIST.
  CLEAR LIST. REFRESH LIST.
  NAME = 'P_WEEK'.
  DO 5 TIMES.
    CLEAR VALUE.
    VALUE-KEY = SY-INDEX.
    CONCATENATE 'Week' SPACE VALUE-KEY INTO VALUE-TEXT RESPECTING BLANKS.
    APPEND VALUE TO LIST.
  ENDDO.
  CLEAR VALUE.
  VALUE-KEY = '0'.
  VALUE-TEXT = 'ALL'.
  APPEND VALUE TO LIST.
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      ID     = NAME
      VALUES = LIST.
  P_WEEK = '0'.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  GET_WEEKS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_WEEKS .
  DATA: PAR_MONTH LIKE  T009B-BUMON,
        PAR_YEAR  LIKE  T009B-BDATJ,
        PAR_DAYS  LIKE  T009B-BUTAG,
        SDATE     LIKE SY-DATUM,
        LDATE     LIKE SY-DATUM,
        TEMPD     TYPE INT1.

  PAR_MONTH = P_MONTH.
  PAR_YEAR = P_YEAR.
  CALL FUNCTION 'NUMBER_OF_DAYS_PER_MONTH_GET'
    EXPORTING
      PAR_MONTH = PAR_MONTH
      PAR_YEAR  = PAR_YEAR
    IMPORTING
      PAR_DAYS  = PAR_DAYS.
  DD = PAR_DAYS.
  CONCATENATE PAR_YEAR PAR_MONTH '01' INTO DATE1.
  CALL FUNCTION 'DATE_GET_WEEK'
    EXPORTING
      DATE = DATE1
    IMPORTING
      WEEK = WEEK1.
  CONCATENATE PAR_YEAR PAR_MONTH PAR_DAYS INTO DATE2.
  CALL FUNCTION 'DATE_GET_WEEK'
    EXPORTING
      DATE = DATE2
    IMPORTING
      WEEK = WEEK2.

  IF WEEK1+0(4) LT P_YEAR.
    CONCATENATE P_YEAR '01' INTO WEEK1.
  ENDIF.
  SWEEK = WEEK1+4(2).
  DATA: T_YEAR TYPE I.
  T_YEAR = P_YEAR.
  IF WEEK2+0(4) GT P_YEAR.
    CALL FUNCTION 'BKK_GET_LASTWEEK_OF_YEAR'
      EXPORTING
        I_YEAR = T_YEAR
      IMPORTING
        E_WEEK = WEEK2.

  ENDIF.
  EWEEK = WEEK2+4(2).

  LOOPS = EWEEK - SWEEK.
  LOOPS = LOOPS + 1.
  DO LOOPS TIMES.
    CALL FUNCTION 'WEEK_GET_FIRST_DAY'
      EXPORTING
        WEEK = WEEK1
      IMPORTING
        DATE = SDATE.
    TEMP_WEEK = WEEK1 + 1.
    IF TEMP_WEEK > WEEK2.
      CONCATENATE P_YEAR P_MONTH '31' INTO LDATE.
    ELSE.
      CALL FUNCTION 'WEEK_GET_FIRST_DAY'
        EXPORTING
          WEEK = TEMP_WEEK
        IMPORTING
          DATE = LDATE.
      LDATE = LDATE - 1.
    ENDIF.
    DATA: TDATE TYPE SY-DATUM,
          DAY   TYPE DTRESR-WEEKDAY.
    TEMPD = '0'.
    IF SDATE LT DATE1.
      SDATE = DATE1.
      TDATE = SDATE.
      WHILE TDATE <= LDATE.
*        IF P_SUN = 'X'.
*          EXIT.
*        ELSE.
        CALL FUNCTION 'DATE_TO_DAY'
          EXPORTING
            DATE    = TDATE
          IMPORTING
            WEEKDAY = DAY.
        IF DAY = 'Sunday'.
          TEMPD = '1'.
        ENDIF.
*        ENDIF.

        TDATE = TDATE + 1.
      ENDWHILE.
      CLEAR TDATE.
    ELSEIF LDATE >= DATE2.
      LDATE = DATE2.
      TDATE = SDATE.
      WHILE TDATE <= LDATE.
        CALL FUNCTION 'DATE_TO_DAY'
          EXPORTING
            DATE    = TDATE
          IMPORTING
            WEEKDAY = DAY.
        IF DAY = 'Sunday'.
          TEMPD = '1'.
        ENDIF.
        TDATE = TDATE + 1.
      ENDWHILE.
      CLEAR TDATE.
    ENDIF.

    LT_WEEK-SIGN = 'I'.
    LT_WEEK-OPTION = 'BT'.
    LT_WEEK-LOW = SDATE.
    LT_WEEK-HIGH = LDATE.
    LT_WEEK-WEEK = SY-INDEX.
*    IF LDATE EQ SDATE.
*      LT_WEEK-WCOUNT = 1 - TEMPD.
*    ELSE.
*      LT_WEEK-WCOUNT = LDATE - SDATE - TEMPD.
*      IF LT_WEEK-WCOUNT LE 5 AND TEMPD EQ 0.
*        LT_WEEK-WCOUNT = LT_WEEK-WCOUNT + 1.
*      ENDIF.
*    ENDIF.
    DATA: TEMPD2 TYPE INT1.
    TEMPD2 = 1.
    IF LDATE EQ SDATE.
      LT_WEEK-WCOUNT = TEMPD2 - TEMPD.
    ELSE.
      LT_WEEK-WCOUNT = LDATE - SDATE - TEMPD + 1.
      IF LT_WEEK-WCOUNT = 7.
        LT_WEEK-WCOUNT = LT_WEEK-WCOUNT - 1.
      ENDIF.
    ENDIF.
    APPEND LT_WEEK TO LT_WEEK.
    CLEAR TEMPD.
    WEEK1 = WEEK1 + 1.
  ENDDO.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FROMEQUNR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FROMEQUNR .
  IF S_EQUNR IS NOT INITIAL AND S_TPLNR IS INITIAL.
    SELECT SINGLE SWERK FROM V_EQUI INTO P_PLANT WHERE EQUNR EQ S_EQUNR-LOW.
  ENDIF.
  IF S_TPLNR IS NOT INITIAL AND S_EQUNR IS INITIAL.
    SELECT SINGLE SWERK FROM V_EQUI INTO P_PLANT WHERE TPLNR EQ S_TPLNR-LOW.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  USER_DROP_DOWN_LIST_FORHR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM USER_DROP_DOWN_LIST_FORHR .
  DATA: NAME  TYPE VRM_ID,
        LIST  TYPE VRM_VALUES,
        VALUE LIKE LINE OF LIST.
  CLEAR LIST. REFRESH LIST.
  NAME = 'P_HOURS'.
  DO 25 TIMES.
    CLEAR VALUE.
    VALUE-KEY = SY-TABIX.
    CONCATENATE VALUE-KEY SPACE 'Hours' INTO VALUE-TEXT RESPECTING BLANKS.
    APPEND VALUE TO LIST.
  ENDDO.
  DELETE LIST INDEX 1.
  CLEAR VALUE.
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      ID     = NAME
      VALUES = LIST.
*  P_HOURS = '8'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM GET_DATA.
  DATA: MONTH TYPE T247-LTX,
        Q1    TYPE STRING.

  TYPES: BEGIN OF TY_VIQMEL,
           EQUNR TYPE VIQMEL-EQUNR,
           SWERK TYPE VIQMEL-SWERK,
           TPLNR TYPE VIQMEL-TPLNR,
           QMNUM TYPE VIQMEL-QMNUM,
           QMTXT TYPE VIQMEL-QMTXT,
           AUSVN TYPE VIQMEL-AUSVN,
           AUSBS TYPE VIQMEL-AUSBS,
           AUZTV TYPE VIQMEL-AUZTV,
           AUZTB TYPE VIQMEL-AUZTB,
           MSAUS TYPE VIQMEL-MSAUS,
           AUSZT TYPE VIQMEL-AUSZT,
         END OF TY_VIQMEL.
  DATA: LT_VIQMEL TYPE TABLE OF TY_VIQMEL.

  IF S_EQUNR IS NOT INITIAL.
    SELECT SINGLE SWERK FROM V_EQUI INTO @DATA(DT_SWERK) WHERE EQUNR EQ @S_EQUNR-LOW.
    IF DT_SWERK NE P_PLANT.
      MESSAGE 'Equipment does not belongs to selected Plant' TYPE 'I'.
      LEAVE LIST-PROCESSING.
    ENDIF.
  ENDIF.

  IF S_TPLNR IS NOT INITIAL.
    SELECT SINGLE SWERK FROM V_EQUI INTO @DATA(DT_SWERK2) WHERE TPLNR EQ @S_TPLNR-LOW.
    IF DT_SWERK2 NE P_PLANT.
      MESSAGE 'Functional Location does not belongs to selected Plant' TYPE 'I'.
      LEAVE LIST-PROCESSING.
    ENDIF.
  ENDIF.


  SORT LT_WEEK BY WEEK ASCENDING.
  READ TABLE LT_WEEK INTO DATA(WSTART) INDEX 1.
  DESCRIBE TABLE LT_WEEK LINES DATA(WEEKCOUNT).
  READ TABLE LT_WEEK INTO DATA(WEND) INDEX WEEKCOUNT.
  IF P_PLANT IS NOT INITIAL.
    Q1 = 'SWERK EQ P_PLANT'.

  ENDIF.
  IF S_EQUNR IS NOT INITIAL.
    IF P_PLANT IS NOT INITIAL.
      CONCATENATE Q1 SPACE 'AND EQUNR IN S_EQUNR' INTO Q1 RESPECTING BLANKS.
    ELSE.
      Q1 = 'EQUNR IN S_EQUNR'.
    ENDIF.
  ENDIF.
  IF S_TPLNR IS NOT INITIAL.
    IF Q1 IS NOT INITIAL.
      CONCATENATE Q1 SPACE 'AND TPLNR IN S_TPLNR' INTO Q1 RESPECTING BLANKS.
    ELSE.
      Q1 = 'TPLNR IN S_TPLNR'.
    ENDIF.
  ENDIF.


  CONCATENATE Q1 SPACE 'AND QMART EQ' SPACE '''M2''' SPACE 'AND AUSVN BETWEEN WSTART-LOW AND WEND-HIGH' INTO Q1 RESPECTING BLANKS.
  SELECT EQUNR SWERK TPLNR QMNUM QMTXT AUSVN AUSBS AUZTV AUZTV MSAUS AUSZT FROM VIQMEL INTO TABLE LT_VIQMEL WHERE (Q1).
  IF LT_VIQMEL IS INITIAL.
    MESSAGE 'No Data Found' TYPE 'I'.
    LEAVE LIST-PROCESSING.
  ENDIF.
  SELECT TPLNR,PLTXT FROM IFLOTX INTO TABLE @DATA(LT_IFLOTX) FOR ALL ENTRIES IN @LT_VIQMEL WHERE TPLNR = @LT_VIQMEL-TPLNR.
*  SELECT SINGLE LTX INTO MONTH FROM T247 WHERE SPRAS EQ 'EN' AND MNR EQ P_MONTH.
  SELECT EQUNR,EQKTX INTO TABLE @DATA(LT_EQKTX) FROM EQKT  FOR ALL ENTRIES IN @LT_VIQMEL WHERE EQUNR = @LT_VIQMEL-EQUNR.


  DATA: M2COUNT   TYPE INT4,
        FVAR      TYPE F,
        PVAR      TYPE P DECIMALS 2,
        BREAKDOWN TYPE P DECIMALS 2.

  LOOP AT LT_WEEK.
    LOOP AT LT_VIQMEL INTO DATA(WA_VIQMEL).
      IF WA_VIQMEL-MSAUS = 'X'.
        IF WA_VIQMEL-AUSVN BETWEEN LT_WEEK-LOW AND LT_WEEK-HIGH.
          M2COUNT = M2COUNT + 1.
          CLEAR: FVAR, PVAR.
          IF WA_VIQMEL-MSAUS = 'X'.
            FVAR = WA_VIQMEL-AUSZT.
            PVAR = FVAR / 3600.
          ENDIF.
          BREAKDOWN = BREAKDOWN + PVAR.
          WA_NOTS-WEEKNO = LT_WEEK-WEEK.
          WA_NOTS-SWERK  = WA_VIQMEL-SWERK.
          WA_NOTS-TPLNR  = WA_VIQMEL-TPLNR.
          READ TABLE LT_IFLOTX INTO DATA(WA_IFLOTX) WITH KEY TPLNR = WA_NOTS-TPLNR.
          WA_NOTS-PLTXT = WA_IFLOTX-PLTXT.
          WA_NOTS-EQUNR         = WA_VIQMEL-EQUNR.
          READ TABLE LT_EQKTX INTO DATA(LS_EQKT2) WITH KEY EQUNR = WA_NOTS-EQUNR.
          WA_NOTS-EQKTX = LS_EQKT2-EQKTX.
          WA_NOTS-QMNUM = WA_VIQMEL-QMNUM.
          WA_NOTS-QMTXT = WA_VIQMEL-QMTXT.
          WA_NOTS-BREAK_TIME = PVAR.
          WA_NOTS-AUSVN = WA_VIQMEL-AUSVN.
          WA_NOTS-AUSBS = WA_VIQMEL-AUSBS.
          WA_NOTS-AUZTV = WA_VIQMEL-AUZTV.
          WA_NOTS-AUZTB = WA_VIQMEL-AUZTB.
*          WRITE:/ WA_NOTS-WEEKNO,
*          WA_NOTS-EQUNR,
*          WA_NOTS-QMNUM,
*          WA_NOTS-BREAK_TIME.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              INPUT  = WA_NOTS-EQUNR
            IMPORTING
              OUTPUT = WA_NOTS-EQUNR.

          APPEND WA_NOTS TO LT_NOTS.

        ELSE.
          CONTINUE.
        ENDIF.
      ELSE.
        CONTINUE.
      ENDIF.

    ENDLOOP.

  ENDLOOP.

  SORT LT_NOTS ASCENDING BY WEEKNO EQUNR TPLNR.
  LOOP AT LT_WEEK.
    READ TABLE LT_NOTS INTO DATA(LS_NOTS) WITH KEY WEEKNO = LT_WEEK-WEEK.
    IF SY-SUBRC = 0.
      DATA(LV_INDEX) = SY-TABIX.
      LOOP AT LT_NOTS INTO WA_NOTS FROM LV_INDEX.
        IF WA_NOTS-EQUNR = LS_NOTS-EQUNR AND WA_NOTS-WEEKNO = LT_WEEK-WEEK AND WA_NOTS-EQUNR IS NOT INITIAL.
          WA_FINAL-WEEK = LT_WEEK-WEEK.
          SELECT SINGLE LTX INTO MONTH FROM T247 WHERE SPRAS EQ 'EN' AND MNR EQ P_MONTH.
          CONCATENATE 'Week' SPACE WA_FINAL-WEEK SPACE 'of' SPACE MONTH P_YEAR INTO WA_FINAL-WEEK2 RESPECTING BLANKS.
          WA_FINAL-SWERK = WA_NOTS-SWERK.
          WA_FINAL-TPLNR = WA_NOTS-TPLNR.
          WA_FINAL-PLTXT = WA_NOTS-PLTXT.
          WA_FINAL-EQUNR = WA_NOTS-EQUNR.
*          READ TABLE LT_EQKTX INTO DATA(LS_EQKTX) WITH KEY EQUNR = WA_FINAL-EQUNR.
          WA_FINAL-EQKTX = WA_NOTS-EQKTX.
          WA_FINAL-NOTIF_COUNT = WA_FINAL-NOTIF_COUNT + 1.
          WA_FINAL-BREAK_TIME = WA_FINAL-BREAK_TIME + WA_NOTS-BREAK_TIME.
          WA_FINAL-MTTR = WA_FINAL-BREAK_TIME / WA_FINAL-NOTIF_COUNT.
          WA_FINAL-LINE_COLOR(4) = 'C110'.
        ELSEIF WA_NOTS-WEEKNO = LT_WEEK-WEEK AND WA_NOTS-EQUNR IS NOT INITIAL.
          APPEND WA_FINAL TO LT_FINAL2.
          CLEAR: WA_FINAL.
          WA_FINAL-WEEK = LT_WEEK-WEEK.
          SELECT SINGLE LTX INTO MONTH FROM T247 WHERE SPRAS EQ 'EN' AND MNR EQ P_MONTH.
          CONCATENATE 'Week' SPACE WA_FINAL-WEEK SPACE 'of' SPACE MONTH P_YEAR INTO WA_FINAL-WEEK2 RESPECTING BLANKS.
          WA_FINAL-SWERK = WA_NOTS-SWERK.
          WA_FINAL-TPLNR = WA_NOTS-TPLNR.
          WA_FINAL-PLTXT = WA_NOTS-PLTXT.
          WA_FINAL-EQUNR = WA_NOTS-EQUNR.
*          READ TABLE LT_EQKTX INTO DATA(LS_EQKTX2) WITH KEY EQUNR = WA_FINAL-EQUNR.
          WA_FINAL-EQKTX = WA_NOTS-EQKTX.
          WA_FINAL-NOTIF_COUNT = WA_FINAL-NOTIF_COUNT + 1.
          WA_FINAL-BREAK_TIME = WA_FINAL-BREAK_TIME + WA_NOTS-BREAK_TIME.
          WA_FINAL-MTTR = WA_FINAL-BREAK_TIME / WA_FINAL-NOTIF_COUNT.

          WA_FINAL-LINE_COLOR(4) = 'C110'.
          LS_NOTS-EQUNR = WA_NOTS-EQUNR.
        ELSEIF WA_NOTS-EQUNR IS INITIAL AND WA_NOTS-TPLNR = LS_NOTS-TPLNR AND WA_NOTS-WEEKNO = LT_WEEK-WEEK.
          WA_FINAL-WEEK = LT_WEEK-WEEK.
          SELECT SINGLE LTX INTO MONTH FROM T247 WHERE SPRAS EQ 'EN' AND MNR EQ P_MONTH.
          CONCATENATE 'Week' SPACE WA_FINAL-WEEK SPACE 'of' SPACE MONTH P_YEAR INTO WA_FINAL-WEEK2 RESPECTING BLANKS.
          WA_FINAL-SWERK = WA_NOTS-SWERK.
          WA_FINAL-TPLNR = WA_NOTS-TPLNR.
          WA_FINAL-PLTXT = WA_NOTS-PLTXT.
          WA_FINAL-EQUNR = WA_NOTS-EQUNR.
          WA_FINAL-NOTIF_COUNT = WA_FINAL-NOTIF_COUNT + 1.
          WA_FINAL-BREAK_TIME = WA_FINAL-BREAK_TIME + WA_NOTS-BREAK_TIME.
          WA_FINAL-MTTR = WA_FINAL-BREAK_TIME / WA_FINAL-NOTIF_COUNT.

          WA_FINAL-LINE_COLOR(4) = 'C110'.
        ELSEIF WA_NOTS-EQUNR IS INITIAL AND WA_NOTS-WEEKNO = LT_WEEK-WEEK.
          APPEND WA_FINAL TO LT_FINAL2.
          CLEAR: WA_FINAL.
          WA_FINAL-WEEK = LT_WEEK-WEEK.
          SELECT SINGLE LTX INTO MONTH FROM T247 WHERE SPRAS EQ 'EN' AND MNR EQ P_MONTH.
          CONCATENATE 'Week' SPACE WA_FINAL-WEEK SPACE 'of' SPACE MONTH P_YEAR INTO WA_FINAL-WEEK2 RESPECTING BLANKS.
          WA_FINAL-SWERK = WA_NOTS-SWERK.
          WA_FINAL-TPLNR = WA_NOTS-TPLNR.
          WA_FINAL-PLTXT = WA_NOTS-PLTXT.
          WA_FINAL-NOTIF_COUNT = WA_FINAL-NOTIF_COUNT + 1.
          WA_FINAL-BREAK_TIME = WA_FINAL-BREAK_TIME + WA_NOTS-BREAK_TIME.
          WA_FINAL-MTTR = WA_FINAL-BREAK_TIME / WA_FINAL-NOTIF_COUNT.
          WA_FINAL-LINE_COLOR(4) = 'C110'.
          LS_NOTS-TPLNR = WA_NOTS-TPLNR.
        ENDIF.
      ENDLOOP.
      IF WA_FINAL IS NOT INITIAL.
        APPEND WA_FINAL TO LT_FINAL2.
        CLEAR: WA_FINAL.
      ENDIF.
    ELSE.
      WA_FINAL-WEEK = LT_WEEK-WEEK.
      SELECT SINGLE LTX INTO MONTH FROM T247 WHERE SPRAS EQ 'EN' AND MNR EQ P_MONTH.
      CONCATENATE 'Week' SPACE WA_FINAL-WEEK SPACE 'of' SPACE MONTH P_YEAR INTO WA_FINAL-WEEK2 RESPECTING BLANKS.
      WA_FINAL-SWERK = P_PLANT.
      WA_FINAL-NOTIF_COUNT = 0.
      WA_FINAL-BREAK_TIME  = 0.
      WA_FINAL-MTTR = 0.
      WA_FINAL-LINE_COLOR(4) = 'C110'.
      APPEND WA_FINAL TO LT_FINAL2.
    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DISPLAY_ALV .
  DATA LV_COL TYPE CHAR4.
  IF LT_FINAL2 IS NOT INITIAL.

    GD_LAYOUT-NO_INPUT          = 'X'.
    GD_LAYOUT-COLWIDTH_OPTIMIZE = 'X'.
    GD_LAYOUT-TOTALS_TEXT       = 'Totals'(201).
    GD_LAYOUT-INFO_FIELDNAME =      'LINE_COLOR'.

*    IT_SORT-FIELDNAME ='EQUNR'.
*    IT_SORT-SPOS = 1.
*    IT_SORT-UP = 'X'.
*    IT_SORT-SUBTOT = 'X'.
*    APPEND IT_SORT TO WA_SORT.
*    CLEAR IT_SORT.

    LV_COL            = LV_COL + 1.
    WA_FCAT-COL_POS   = LV_COL.
    WA_FCAT-FIELDNAME = 'WEEK2'.
    WA_FCAT-TABNAME   = 'LT_FINAL'.
    WA_FCAT-SELTEXT_L = 'WEEK'.
    WA_FCAT-EMPHASIZE = 'X'.
    WA_FCAT-JUST = 'C'.
    APPEND WA_FCAT TO IT_FCAT.
    CLEAR WA_FCAT.

    LV_COL            = LV_COL + 1.
    WA_FCAT-COL_POS   = LV_COL.
    WA_FCAT-FIELDNAME = 'SWERK'.
    WA_FCAT-TABNAME   = 'LT_FINAL'.
    WA_FCAT-SELTEXT_L = 'Maintenance Plant'.
    WA_FCAT-EMPHASIZE = 'X'.
    WA_FCAT-JUST = 'C'.
    APPEND WA_FCAT TO IT_FCAT.
    CLEAR WA_FCAT.

    LV_COL            = LV_COL + 1.
    WA_FCAT-COL_POS   = LV_COL.
    WA_FCAT-FIELDNAME = 'TPLNR'.
    WA_FCAT-TABNAME   = 'LT_FINAL'.
    WA_FCAT-SELTEXT_L = 'Functional Location'.
    WA_FCAT-JUST = 'C'.
    WA_FCAT-HOTSPOT = 'X'.
    APPEND WA_FCAT TO IT_FCAT.
    CLEAR WA_FCAT.

    LV_COL            = LV_COL + 1.
    WA_FCAT-COL_POS   = LV_COL.
    WA_FCAT-FIELDNAME = 'PLTXT'.
    WA_FCAT-TABNAME   = 'LT_FINAL'.
    WA_FCAT-SELTEXT_L = 'Functional Location Description'.
    WA_FCAT-JUST = 'C'.
    APPEND WA_FCAT TO IT_FCAT.
    CLEAR WA_FCAT.

    LV_COL            = LV_COL + 1.
    WA_FCAT-COL_POS   = LV_COL.
    WA_FCAT-FIELDNAME = 'EQUNR'.
    WA_FCAT-TABNAME   = 'LT_FINAL'.
    WA_FCAT-SELTEXT_L = 'Equipment No'.
    WA_FCAT-JUST = 'C'.
    WA_FCAT-HOTSPOT = 'X'.
    APPEND WA_FCAT TO IT_FCAT.
    CLEAR WA_FCAT.

    LV_COL            = LV_COL + 1.
    WA_FCAT-COL_POS   = LV_COL.
    WA_FCAT-FIELDNAME = 'EQKTX'.
    WA_FCAT-TABNAME   = 'LT_FINAL'.
    WA_FCAT-SELTEXT_L = 'Equipment Description'.
    WA_FCAT-JUST = 'L'.
    APPEND WA_FCAT TO IT_FCAT.
    CLEAR WA_FCAT.

    LV_COL            = LV_COL + 1.
    WA_FCAT-COL_POS   = LV_COL.
    WA_FCAT-FIELDNAME = 'NOTIF_COUNT'.
    WA_FCAT-TABNAME   = 'LT_FINAL'.
    WA_FCAT-SELTEXT_L = 'M2 Notification Count'.
    WA_FCAT-JUST = 'C'.
    WA_FCAT-HOTSPOT = 'X'.
    APPEND WA_FCAT TO IT_FCAT.
    CLEAR WA_FCAT.

    LV_COL            = LV_COL + 1.
    WA_FCAT-COL_POS   = LV_COL.
    WA_FCAT-FIELDNAME = 'BREAK_TIME'.
    WA_FCAT-TABNAME   = 'LT_FINAL'.
    WA_FCAT-SELTEXT_L = 'Breakdown Time (Hrs)'.
*    WA_FCAT-EDIT_MASK   = '____Hours'.
    WA_FCAT-JUST = 'C'.
    APPEND WA_FCAT TO IT_FCAT.
    CLEAR WA_FCAT.

    LV_COL            = LV_COL + 1.
    WA_FCAT-COL_POS   = LV_COL.
    WA_FCAT-FIELDNAME = 'MTTR'.
    WA_FCAT-TABNAME   = 'LT_FINAL'.
    WA_FCAT-SELTEXT_L = 'MTTR (Hrs)'.
    WA_FCAT-EMPHASIZE = 'X'.
    WA_FCAT-OUTPUTLEN = '9'.
*    WA_FCAT-EDIT_MASK   = '____Hours'.
    WA_FCAT-JUST = 'C'.
    APPEND WA_FCAT TO IT_FCAT.
    CLEAR WA_FCAT.


*
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        I_CALLBACK_PROGRAM          = G_REPID
        I_CALLBACK_USER_COMMAND     = 'USER_COMMAND'
        I_CALLBACK_HTML_TOP_OF_PAGE = 'TOP_OF_PAGE'
        IS_LAYOUT                   = GD_LAYOUT
        IT_FIELDCAT                 = IT_FCAT
        IT_SORT                     = WA_SORT
*       I_DEFAULT                   = 'X'
*       I_SAVE                      = 'X'
      TABLES
        T_OUTTAB                    = LT_FINAL2.
  ENDIF.


ENDFORM.

FORM USER_COMMAND USING R_UCOMM TYPE SY-UCOMM
      RS_SELFIELD TYPE SLIS_SELFIELD.
  DATA LAST TYPE CHAR1.
  CASE R_UCOMM.
    WHEN '&IC1'.
      CLEAR LAST.
      IF RS_SELFIELD-SEL_TAB_FIELD EQ 'LT_FINAL-NOTIF_COUNT'.
        READ TABLE LT_FINAL2 INTO DATA(LS_FINAL) INDEX RS_SELFIELD-TABINDEX.
        IF LS_FINAL-EQUNR IS NOT INITIAL.
          REFRESH LT_SUBLIST.
          LOOP AT LT_NOTS INTO WA_NOTS WHERE WEEKNO = LS_FINAL-WEEK AND EQUNR = LS_FINAL-EQUNR.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
              EXPORTING
                INPUT  = WA_NOTS-EQUNR
              IMPORTING
                OUTPUT = WA_NOTS-EQUNR.

            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
              EXPORTING
                INPUT  = WA_NOTS-QMNUM
              IMPORTING
                OUTPUT = WA_NOTS-QMNUM.
            APPEND WA_NOTS TO LT_SUBLIST.
            CLEAR WA_NOTS.
          ENDLOOP.
        ELSEIF LS_FINAL-TPLNR IS NOT INITIAL.
          REFRESH LT_SUBLIST.
          LOOP AT LT_NOTS INTO WA_NOTS WHERE WEEKNO = LS_FINAL-WEEK AND TPLNR = LS_FINAL-TPLNR AND EQUNR = ''.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
              EXPORTING
                INPUT  = WA_NOTS-EQUNR
              IMPORTING
                OUTPUT = WA_NOTS-EQUNR.

            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
              EXPORTING
                INPUT  = WA_NOTS-QMNUM
              IMPORTING
                OUTPUT = WA_NOTS-QMNUM.
            APPEND WA_NOTS TO LT_SUBLIST.
            CLEAR WA_NOTS.
          ENDLOOP.
        ENDIF.

        PERFORM DISPLAY_SUBLIST.
      ELSEIF RS_SELFIELD-SEL_TAB_FIELD EQ 'LT_SUBLIST-QMNUM'.
        DATA: DT_AUFNR TYPE TY_FINAL2.
        READ TABLE LT_SUBLIST INDEX RS_SELFIELD-TABINDEX INTO DT_AUFNR.
        SET PARAMETER ID 'IQM' FIELD DT_AUFNR-QMNUM.
        CALL TRANSACTION 'IW23' AND SKIP FIRST SCREEN .
        CLEAR DT_AUFNR.
      ELSEIF RS_SELFIELD-SEL_TAB_FIELD EQ 'LT_SUBLIST-EQUNR'.
        READ TABLE LT_SUBLIST INDEX RS_SELFIELD-TABINDEX INTO DATA(DT_EQUNR).
        SET PARAMETER ID 'EQN' FIELD DT_EQUNR-EQUNR.
        CALL TRANSACTION 'IE03' AND SKIP FIRST SCREEN .
      ELSEIF RS_SELFIELD-SEL_TAB_FIELD EQ 'LT_FINAL-EQUNR'.
        READ TABLE LT_FINAL2 INDEX RS_SELFIELD-TABINDEX INTO DATA(DT_EQUNR2).
        SET PARAMETER ID 'EQN' FIELD DT_EQUNR2-EQUNR.
        CALL TRANSACTION 'IE03' AND SKIP FIRST SCREEN .
      ELSEIF RS_SELFIELD-SEL_TAB_FIELD EQ 'LT_FINAL-TPLNR'.
        READ TABLE LT_FINAL2 INDEX RS_SELFIELD-TABINDEX INTO DATA(DT_TPLNR2).
        SET PARAMETER ID 'IFL' FIELD DT_TPLNR2-TPLNR.
        CALL TRANSACTION 'IL03' AND SKIP FIRST SCREEN .
      ELSEIF RS_SELFIELD-SEL_TAB_FIELD EQ 'LT_SUBLIST-TPLNR'.
        READ TABLE LT_SUBLIST INDEX RS_SELFIELD-TABINDEX INTO DATA(DT_TPLNR).
        SET PARAMETER ID 'IFL' FIELD DT_TPLNR-TPLNR.
        CALL TRANSACTION 'IL03' AND SKIP FIRST SCREEN .
      ENDIF.
  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_SUBLIST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DISPLAY_SUBLIST .
  DATA: LV_COL TYPE CHAR1.
  GD_LAYOUT2-NO_INPUT          = 'X'.
  GD_LAYOUT2-COLWIDTH_OPTIMIZE = 'X'.
* Set layout field for row attributes(i.e. color)
  GD_LAYOUT2-INFO_FIELDNAME =      'LINE_COLOR'.

  REFRESH IT_FCAT2.
*  IT_SORT2-FIELDNAME ='EQUNR'.
*  IT_SORT2-SPOS = 1.
*  IT_SORT2-UP = 'X'.
*  IT_SORT2-SUBTOT = 'X'.
*  APPEND IT_SORT2 TO WA_SORT2.
*  CLEAR IT_SORT2.
*
*  IT_SORT2-FIELDNAME ='EQKTX'.
*  IT_SORT2-SPOS = 1.
*  IT_SORT2-UP = 'X'.
*  IT_SORT2-SUBTOT = 'X'.
*  APPEND IT_SORT2 TO WA_SORT2.
*  CLEAR IT_SORT2.

  LV_COL            = LV_COL + 1.
  WA_FCAT2-COL_POS   = LV_COL.
  WA_FCAT2-FIELDNAME = 'WEEKNO'.
  WA_FCAT2-TABNAME   = 'LT_SUBLIST'.
  WA_FCAT2-SELTEXT_L = 'Week No'.
  WA_FCAT2-EMPHASIZE = 'X'.
  WA_FCAT2-JUST = 'C'.
  APPEND WA_FCAT2 TO IT_FCAT2.
  CLEAR WA_FCAT2.

  LV_COL            = LV_COL + 1.
  WA_FCAT2-COL_POS   = LV_COL.
  WA_FCAT2-FIELDNAME = 'TPLNR'.
  WA_FCAT2-TABNAME   = 'LT_SUBLIST'.
  WA_FCAT2-SELTEXT_L = 'Functional Location'.
  WA_FCAT2-HOTSPOT = 'X'.
  WA_FCAT2-JUST = 'C'.
  APPEND WA_FCAT2 TO IT_FCAT2.
  CLEAR WA_FCAT2.

  LV_COL            = LV_COL + 1.
  WA_FCAT2-COL_POS   = LV_COL.
  WA_FCAT2-FIELDNAME = 'PLTXT'.
  WA_FCAT2-TABNAME   = 'LT_SUBLIST'.
  WA_FCAT2-SELTEXT_L = 'Functional Location Description'.
  WA_FCAT2-JUST = 'C'.
  APPEND WA_FCAT2 TO IT_FCAT2.
  CLEAR WA_FCAT2.

  LV_COL            = LV_COL + 1.
  WA_FCAT2-COL_POS   = LV_COL.
  WA_FCAT2-FIELDNAME = 'EQUNR'.
  WA_FCAT2-TABNAME   = 'LT_SUBLIST'.
  WA_FCAT2-SELTEXT_L = 'Equipment No'.
  WA_FCAT2-HOTSPOT = 'X'.
  WA_FCAT2-JUST = 'C'.
  APPEND WA_FCAT2 TO IT_FCAT2.
  CLEAR WA_FCAT2.

  LV_COL            = LV_COL + 1.
  WA_FCAT2-COL_POS   = LV_COL.
  WA_FCAT2-FIELDNAME = 'EQKTX'.
  WA_FCAT2-TABNAME   = 'LT_SUBLIST'.
  WA_FCAT2-SELTEXT_L = 'Equipment Description'.
  WA_FCAT2-JUST = 'L'.
  APPEND WA_FCAT2 TO IT_FCAT2.
  CLEAR WA_FCAT2.

  LV_COL            = LV_COL + 1.
  WA_FCAT2-COL_POS   = LV_COL.
  WA_FCAT2-FIELDNAME = 'QMNUM'.
  WA_FCAT2-TABNAME   = 'LT_SUBLIST'.
  WA_FCAT2-SELTEXT_L = 'Notification No'.
  WA_FCAT2-JUST = 'C'.
  WA_FCAT2-HOTSPOT = 'X'.
  APPEND WA_FCAT2 TO IT_FCAT2.
  CLEAR WA_FCAT2.

*  LV_COL            = LV_COL + 1.
*  WA_FCAT2-COL_POS   = LV_COL.
*  WA_FCAT2-FIELDNAME = 'QMART'.
*  WA_FCAT2-TABNAME   = 'LT_SUBLIST'.
*  WA_FCAT2-SELTEXT_L = 'Notification Type'.
*  WA_FCAT2-JUST = 'L'.
*  APPEND WA_FCAT2 TO IT_FCAT2.
*  CLEAR WA_FCAT2.

  LV_COL            = LV_COL + 1.
  WA_FCAT2-COL_POS   = LV_COL.
  WA_FCAT2-FIELDNAME = 'QMTXT'.
  WA_FCAT2-TABNAME   = 'LT_SUBLIST'.
  WA_FCAT2-SELTEXT_L = 'Notification Description'.
  WA_FCAT2-JUST = 'L'.
  APPEND WA_FCAT2 TO IT_FCAT2.
  CLEAR WA_FCAT2.

  LV_COL            = LV_COL + 1.
  WA_FCAT2-COL_POS   = LV_COL.
  WA_FCAT2-FIELDNAME = 'BREAK_TIME'.
  WA_FCAT2-TABNAME   = 'LT_SUBLIST'.
  WA_FCAT2-SELTEXT_L = 'Breakdown Duration'.
  WA_FCAT2-JUST = 'C'.
  APPEND WA_FCAT2 TO IT_FCAT2.
  CLEAR WA_FCAT2.

  LV_COL            = LV_COL + 1.
  WA_FCAT2-COL_POS   = LV_COL.
  WA_FCAT2-FIELDNAME = 'AUSVN'.
  WA_FCAT2-TABNAME   = 'LT_SUBLIST'.
  WA_FCAT2-SELTEXT_L = 'Malfunction Start Date'.
  WA_FCAT2-JUST = 'C'.
  APPEND WA_FCAT2 TO IT_FCAT2.
  CLEAR WA_FCAT2.

*  LV_COL            = LV_COL + 1.
  WA_FCAT2-COL_POS   = '10'.
  WA_FCAT2-FIELDNAME = 'AUSBS'.
  WA_FCAT2-TABNAME   = 'LT_SUBLIST'.
  WA_FCAT2-SELTEXT_L = 'Malfunction End Date'.
  WA_FCAT2-JUST = 'C'.
  APPEND WA_FCAT2 TO IT_FCAT2.
  CLEAR WA_FCAT2.

  WA_FCAT2-COL_POS   = '11'.
  WA_FCAT2-FIELDNAME = 'AUZTV'.
  WA_FCAT2-TABNAME   = 'LT_SUBLIST'.
  WA_FCAT2-SELTEXT_L = 'Malfunction Start Time'.
  WA_FCAT2-JUST = 'C'.
  APPEND WA_FCAT2 TO IT_FCAT2.
  CLEAR WA_FCAT2.

  WA_FCAT2-COL_POS   = '10'.
  WA_FCAT2-FIELDNAME = 'AUZTB'.
  WA_FCAT2-TABNAME   = 'LT_SUBLIST'.
  WA_FCAT2-SELTEXT_L = 'Malfunction End Time'.
  WA_FCAT2-JUST = 'C'.
  APPEND WA_FCAT2 TO IT_FCAT2.
  CLEAR WA_FCAT2.


  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
*     I_INTERFACE_CHECK       = ' '
*     I_BYPASSING_BUFFER      = ' '
*     I_BUFFER_ACTIVE         = ' '
      I_CALLBACK_PROGRAM      = SY-REPID
*     I_CALLBACK_PF_STATUS_SET          = ' '
      I_CALLBACK_USER_COMMAND = 'USER_COMMAND'
*     I_CALLBACK_TOP_OF_PAGE  = 'TOP_OF_PAGE'
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME        =
*     I_BACKGROUND_ID         = ' '
*     I_GRID_TITLE            =
*     I_GRID_SETTINGS         =
      IS_LAYOUT               = GD_LAYOUT2
      IT_FIELDCAT             = IT_FCAT2
*     IT_EXCLUDING            =
*     IT_SPECIAL_GROUPS       =
      IT_SORT                 = WA_SORT2
*     IT_FILTER               =
*     IS_SEL_HIDE             =
*     I_DEFAULT               = 'X'
*     I_SAVE                  = 'X'
*     IS_VARIANT              =
*     IT_EVENTS               =
*     IT_EVENT_EXIT           =
*     IS_PRINT                =
*     IS_REPREP_ID            =
*     I_SCREEN_START_COLUMN   = 0
*     I_SCREEN_START_LINE     = 0
*     I_SCREEN_END_COLUMN     = 0
*     I_SCREEN_END_LINE       = 0
*     I_HTML_HEIGHT_TOP       = 0
*     I_HTML_HEIGHT_END       = 0
*     IT_ALV_GRAPHICS         =
*     IT_HYPERLINK            =
*     IT_ADD_FIELDCAT         =
*     IT_EXCEPT_QINFO         =
*     IR_SALV_FULLSCREEN_ADAPTER        =
*     IMPORTING
*     E_EXIT_CAUSED_BY_CALLER =
*     ES_EXIT_CAUSED_BY_USER  =
    TABLES
      T_OUTTAB                = LT_SUBLIST
*     EXCEPTIONS
*     PROGRAM_ERROR           = 1
*     OTHERS                  = 2
    .
ENDFORM.

FORM TOP_OF_PAGE USING O_DD_LEFT TYPE REF TO CL_DD_DOCUMENT.

  DATA: O_DD_RIGHT TYPE REF TO CL_DD_AREA.

  CALL METHOD O_DD_LEFT->VERTICAL_SPLIT
    EXPORTING
      SPLIT_AREA  = O_DD_LEFT
      SPLIT_WIDTH = '100%'
    IMPORTING
      RIGHT_AREA  = O_DD_RIGHT.
  DATA: IT_LISTHEADER  TYPE SDYDO_TEXT_TABLE,
        IT_LISTHEADER2 TYPE SDYDO_TEXT_TABLE,
        WA_LISTHEADER  LIKE LINE OF IT_LISTHEADER.

  WA_LISTHEADER = 'MTTR (Mean Time to Repair)'.
  APPEND WA_LISTHEADER TO IT_LISTHEADER.
  CLEAR WA_LISTHEADER.

  CALL METHOD O_DD_LEFT->ADD_TEXT
    EXPORTING
      TEXT_TABLE   = IT_LISTHEADER
      FIX_LINES    = 'X'
      SAP_EMPHASIS = CL_DD_DOCUMENT=>STRONG.

  REFRESH IT_LISTHEADER.

  WA_LISTHEADER = ' is the average time required to fix the failed Equipment or Functional Location and return it to production status.'.
  APPEND WA_LISTHEADER TO IT_LISTHEADER.
  CLEAR WA_LISTHEADER.
  CALL METHOD O_DD_LEFT->ADD_TEXT
    EXPORTING
      TEXT_TABLE = IT_LISTHEADER
      FIX_LINES  = 'X'.

  REFRESH IT_LISTHEADER.
  WA_LISTHEADER = ''.
  APPEND WA_LISTHEADER TO IT_LISTHEADER.
  CLEAR WA_LISTHEADER.

  CALL METHOD O_DD_LEFT->ADD_TEXT
    EXPORTING
      TEXT_TABLE   = IT_LISTHEADER
      FIX_LINES    = 'X'
      SAP_EMPHASIS = CL_DD_DOCUMENT=>STRONG.

  REFRESH IT_LISTHEADER.

  WA_LISTHEADER = 'Example :'.
  APPEND WA_LISTHEADER TO IT_LISTHEADER.
  CLEAR WA_LISTHEADER.

  CALL METHOD O_DD_LEFT->ADD_TEXT
    EXPORTING
      TEXT_TABLE   = IT_LISTHEADER
      FIX_LINES    = 'X'
      SAP_EMPHASIS = CL_DD_DOCUMENT=>STRONG.

  REFRESH IT_LISTHEADER.

  WA_LISTHEADER = 'Against an Equipment 4 numbers of M2 Notifications are created in 1 week (7 days) and each time it has taken 12 H, 8 H, 9 H, 11 H to fix the breakdown respectively then the MTTR for this Equipment is 10 H for that period.'.
  APPEND WA_LISTHEADER TO IT_LISTHEADER.
  CLEAR WA_LISTHEADER.

  WA_LISTHEADER = ' The calculation is, MTTR = (12+8+9+11) /4 =  40/4 = 10 H .'.
  APPEND WA_LISTHEADER TO IT_LISTHEADER.
  CLEAR WA_LISTHEADER.

  CALL METHOD O_DD_LEFT->ADD_TEXT
    EXPORTING
      TEXT_TABLE = IT_LISTHEADER
      FIX_LINES  = 'X'.

*CALL METHOD O_DD_RIGHT->ADD_TEXT
*    EXPORTING
*      TEXT_TABLE = IT_LISTHEADER2
*      FIX_LINES = 'X'.



ENDFORM.
